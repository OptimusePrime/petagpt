// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createChunk = `-- name: CreateChunk :one
INSERT INTO chunks (document_id, start_offset, end_offset, content, context)
VALUES (?, ?, ?, ?, ?) RETURNING id, created_at, updated_at, document_id, start_offset, end_offset, content, context
`

type CreateChunkParams struct {
	DocumentID  int64
	StartOffset int64
	EndOffset   interface{}
	Content     sql.NullString
	Context     sql.NullString
}

func (q *Queries) CreateChunk(ctx context.Context, arg CreateChunkParams) (Chunk, error) {
	row := q.db.QueryRowContext(ctx, createChunk,
		arg.DocumentID,
		arg.StartOffset,
		arg.EndOffset,
		arg.Content,
		arg.Context,
	)
	var i Chunk
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DocumentID,
		&i.StartOffset,
		&i.EndOffset,
		&i.Content,
		&i.Context,
	)
	return i, err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations DEFAULT VALUES RETURNING id, created_at, updated_at
`

func (q *Queries) CreateConversation(ctx context.Context) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation)
	var i Conversation
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createDocument = `-- name: CreateDocument :one
INSERT INTO documents (filePath, fileType, fileSize)
VALUES (?, ?, ?) RETURNING id, created_at, updated_at, filepath, filetype, filesize
`

type CreateDocumentParams struct {
	Filepath string
	Filetype string
	Filesize int64
}

func (q *Queries) CreateDocument(ctx context.Context, arg CreateDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, createDocument, arg.Filepath, arg.Filetype, arg.Filesize)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Filepath,
		&i.Filetype,
		&i.Filesize,
	)
	return i, err
}

const createIndex = `-- name: CreateIndex :one
INSERT INTO indexes (name, description)
VALUES (?, ?) RETURNING id, created_at, updated_at, name, description
`

type CreateIndexParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateIndex(ctx context.Context, arg CreateIndexParams) (Index, error) {
	row := q.db.QueryRowContext(ctx, createIndex, arg.Name, arg.Description)
	var i Index
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (conversation_id, ipv4_addr, user_agent, content)
VALUES (?, ?, ?, ?) RETURNING id, conversation_id, created_at, updated_at, ipv4_addr, user_agent, content
`

type CreateMessageParams struct {
	ConversationID int64
	Ipv4Addr       string
	UserAgent      string
	Content        sql.NullString
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage,
		arg.ConversationID,
		arg.Ipv4Addr,
		arg.UserAgent,
		arg.Content,
	)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ipv4Addr,
		&i.UserAgent,
		&i.Content,
	)
	return i, err
}

const deleteChunk = `-- name: DeleteChunk :exec
DELETE FROM chunks WHERE id = ?
`

func (q *Queries) DeleteChunk(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChunk, id)
	return err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations WHERE id = ?
`

func (q *Queries) DeleteConversation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConversation, id)
	return err
}

const deleteDocument = `-- name: DeleteDocument :exec
DELETE FROM documents WHERE id = ?
`

func (q *Queries) DeleteDocument(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDocument, id)
	return err
}

const deleteIndex = `-- name: DeleteIndex :exec
DELETE FROM indexes WHERE id = ?
`

func (q *Queries) DeleteIndex(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteIndex, id)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getChunk = `-- name: GetChunk :one

SELECT id, created_at, updated_at, document_id, start_offset, end_offset, content, context
FROM chunks
WHERE id = ? LIMIT 1
`

// ------
// chunks
// ------
func (q *Queries) GetChunk(ctx context.Context, id int64) (Chunk, error) {
	row := q.db.QueryRowContext(ctx, getChunk, id)
	var i Chunk
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DocumentID,
		&i.StartOffset,
		&i.EndOffset,
		&i.Content,
		&i.Context,
	)
	return i, err
}

const getConversation = `-- name: GetConversation :one

SELECT id, created_at, updated_at
FROM conversations
WHERE id = ? LIMIT 1
`

// ------
// conversations
// ------
func (q *Queries) GetConversation(ctx context.Context, id int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversation, id)
	var i Conversation
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getDocument = `-- name: GetDocument :one

SELECT id, created_at, updated_at, filepath, filetype, filesize
FROM documents
WHERE id = ? LIMIT 1
`

// ------
// documents
// ------
func (q *Queries) GetDocument(ctx context.Context, id int64) (Document, error) {
	row := q.db.QueryRowContext(ctx, getDocument, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Filepath,
		&i.Filetype,
		&i.Filesize,
	)
	return i, err
}

const getIndex = `-- name: GetIndex :one

SELECT id, created_at, updated_at, name, description
FROM indexes
WHERE id = ? LIMIT 1
`

// ------
// indexes
// ------
func (q *Queries) GetIndex(ctx context.Context, id int64) (Index, error) {
	row := q.db.QueryRowContext(ctx, getIndex, id)
	var i Index
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Description,
	)
	return i, err
}

const getMessage = `-- name: GetMessage :one

SELECT id, conversation_id, created_at, updated_at, ipv4_addr, user_agent, content
FROM messages
WHERE id = ? LIMIT 1
`

// ------
// messages
// ------
func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Ipv4Addr,
		&i.UserAgent,
		&i.Content,
	)
	return i, err
}

const listChunks = `-- name: ListChunks :many
SELECT id, created_at, updated_at, document_id, start_offset, end_offset, content, context
FROM chunks
ORDER BY start_offset
`

func (q *Queries) ListChunks(ctx context.Context) ([]Chunk, error) {
	rows, err := q.db.QueryContext(ctx, listChunks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chunk
	for rows.Next() {
		var i Chunk
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DocumentID,
			&i.StartOffset,
			&i.EndOffset,
			&i.Content,
			&i.Context,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listConversations = `-- name: ListConversations :many
SELECT id, created_at, updated_at
FROM conversations
ORDER BY created_at
`

func (q *Queries) ListConversations(ctx context.Context) ([]Conversation, error) {
	rows, err := q.db.QueryContext(ctx, listConversations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conversation
	for rows.Next() {
		var i Conversation
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDocuments = `-- name: ListDocuments :many
SELECT id, created_at, updated_at, filepath, filetype, filesize
FROM documents
ORDER BY created_at
`

func (q *Queries) ListDocuments(ctx context.Context) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, listDocuments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Filepath,
			&i.Filetype,
			&i.Filesize,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listIndexes = `-- name: ListIndexes :many
SELECT id, created_at, updated_at, name, description
FROM indexes
ORDER BY name
`

func (q *Queries) ListIndexes(ctx context.Context) ([]Index, error) {
	rows, err := q.db.QueryContext(ctx, listIndexes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Index
	for rows.Next() {
		var i Index
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMessages = `-- name: ListMessages :many
SELECT id, conversation_id, created_at, updated_at, ipv4_addr, user_agent, content
FROM messages
ORDER BY created_at
`

func (q *Queries) ListMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Ipv4Addr,
			&i.UserAgent,
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChunk = `-- name: UpdateChunk :exec
UPDATE chunks SET document_id = ?, start_offset = ?, end_offset = ?, content = ?, context = ? WHERE id = ?
`

type UpdateChunkParams struct {
	DocumentID  int64
	StartOffset int64
	EndOffset   interface{}
	Content     sql.NullString
	Context     sql.NullString
	ID          int64
}

func (q *Queries) UpdateChunk(ctx context.Context, arg UpdateChunkParams) error {
	_, err := q.db.ExecContext(ctx, updateChunk,
		arg.DocumentID,
		arg.StartOffset,
		arg.EndOffset,
		arg.Content,
		arg.Context,
		arg.ID,
	)
	return err
}

const updateConversation = `-- name: UpdateConversation :exec
UPDATE conversations SET updated_at = ? WHERE id = ?
`

type UpdateConversationParams struct {
	UpdatedAt time.Time
	ID        int64
}

func (q *Queries) UpdateConversation(ctx context.Context, arg UpdateConversationParams) error {
	_, err := q.db.ExecContext(ctx, updateConversation, arg.UpdatedAt, arg.ID)
	return err
}

const updateDocument = `-- name: UpdateDocument :exec
UPDATE documents SET filePath = ?, fileType = ?, fileSize = ? WHERE id = ?
`

type UpdateDocumentParams struct {
	Filepath string
	Filetype string
	Filesize int64
	ID       int64
}

func (q *Queries) UpdateDocument(ctx context.Context, arg UpdateDocumentParams) error {
	_, err := q.db.ExecContext(ctx, updateDocument,
		arg.Filepath,
		arg.Filetype,
		arg.Filesize,
		arg.ID,
	)
	return err
}

const updateIndex = `-- name: UpdateIndex :exec
UPDATE indexes SET name = ?, description = ? WHERE id = ?
`

type UpdateIndexParams struct {
	Name        string
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateIndex(ctx context.Context, arg UpdateIndexParams) error {
	_, err := q.db.ExecContext(ctx, updateIndex, arg.Name, arg.Description, arg.ID)
	return err
}

const updateMessage = `-- name: UpdateMessage :exec
UPDATE messages SET conversation_id = ?, ipv4_addr = ?, user_agent = ?, content = ? WHERE id = ?
`

type UpdateMessageParams struct {
	ConversationID int64
	Ipv4Addr       string
	UserAgent      string
	Content        sql.NullString
	ID             int64
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) error {
	_, err := q.db.ExecContext(ctx, updateMessage,
		arg.ConversationID,
		arg.Ipv4Addr,
		arg.UserAgent,
		arg.Content,
		arg.ID,
	)
	return err
}
